C51 COMPILER V9.53.0.0   HAL_UART                                                          08/13/2015 13:35:47 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE HAL_UART
OBJECT MODULE PLACED IN .\build\hal_uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\..\hal\nrf24lu1p\hal_uart.c OMF2 ROM(COMPACT) OPTIMIZE(9,SPEED) BR
                    -OWSE MODC2 INCDIR(..\..\..\hal;..\..\..\hal\nrf24lu1p;..\..\..\compiler\c51;..\..\..\compiler\common;..\TPF) PRINT(.\lis
                    -t\hal_uart.lst) TABS(2) PREPRINT(.\list\hal_uart.i) OBJECT(.\build\hal_uart.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic 
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *              
  11           * $LastChangedRevision: 133 $
  12           */
  13          
  14          /** @file
  15          * @brief Implementation of the UART HAL module for nRF24LU1+ with data buffering
  16          */
  17           
  18          #include "nrf24lu1p.h"
  19          #include <stdint.h>
  20          #include "hal_uart.h"
  21          
  22          #ifndef UART_NBUF
  23          #define UART_NBUF   8
  24          #endif
  25          
  26          #define BAUD_57K6   1015  // = Round(1024 - (2*16e6)/(64*57600))
  27          #define BAUD_38K4   1011  // = Round(1024 - (2*16e6)/(64*38400))
  28          #define BAUD_19K2    998  // = Round(1024 - (2*16e6)/(64*19200))
  29          #define BAUD_9K6     972  // = Round(1024 - (2*16e6)/(64*9600))
  30          
  31          static uint8_t uart_tx_wp, uart_tx_rp, uart_tx_cnt;
  32          static uint8_t idata uart_tx[UART_NBUF];
  33          
  34          static uint8_t uart_rx_wp, uart_rx_rp, uart_rx_cnt;
  35          static uint8_t idata uart_rx[UART_NBUF];
  36          
  37          UART0_ISR()
  38          {
  39   1        if (RI0 == 1)
  40   1        {
  41   2          RI0 = 0;
  42   2          if (uart_rx_cnt < UART_NBUF)
  43   2          {
  44   3            uart_rx[uart_rx_wp] = S0BUF;
  45   3            uart_rx_wp = (uart_rx_wp + 1) % UART_NBUF;
  46   3            uart_rx_cnt++;
  47   3          }
  48   2        }
  49   1        if (TI0 == 1)
  50   1        {
  51   2          TI0 = 0;
  52   2          if (uart_tx_cnt > 1)
  53   2          {
C51 COMPILER V9.53.0.0   HAL_UART                                                          08/13/2015 13:35:47 PAGE 2   

  54   3            S0BUF = uart_tx[uart_tx_rp];
  55   3            uart_tx_rp = (uart_tx_rp + 1) % UART_NBUF;
  56   3          }
  57   2          uart_tx_cnt--;
  58   2        }
  59   1      }
  60          
  61          void hal_uart_init(hal_uart_baudrate_t baud)
  62          {
  63   1        uint16_t temp;
  64   1      
  65   1        ES0 = 0;                      // Disable UART0 interrupt while initializing
  66   1        uart_tx_wp = uart_tx_rp = 0;
  67   1        uart_tx_cnt = 0;
  68   1        uart_rx_wp = uart_rx_rp = 0;
  69   1        uart_rx_cnt = 0;
  70   1        REN0 = 1;                     // Enable receiver
  71   1        SM0 = 0;                      // Mode 1..
  72   1        SM1 = 1;                      // ..8 bit variable baud rate
  73   1        PCON |= 0x80;                 // SMOD = 1
  74   1        WDCON |= 0x80;                // Select internal baud rate generator
  75   1        switch(baud)
  76   1        {
  77   2          case UART_BAUD_57K6:
  78   2            temp = BAUD_57K6;
  79   2            break;
  80   2          case UART_BAUD_38K4:
  81   2            temp = BAUD_38K4;
  82   2            break;
  83   2          case UART_BAUD_9K6:
  84   2            temp = BAUD_9K6;
  85   2            break;
  86   2          case UART_BAUD_19K2:
  87   2          default:
  88   2            temp = BAUD_19K2;
  89   2            break;
  90   2        }
  91   1        S0RELL = (uint8_t)temp;
  92   1        S0RELH = (uint8_t)(temp >> 8);
  93   1        P0ALT |= 0x06;                // Select alternate functions on P01 and P02
  94   1        P0EXP &= 0xf0;                // Select RxD on P01 and TxD on P02
  95   1        P0DIR |= 0x02;                // P01 (RxD) is input
  96   1        TI0 = 0;
  97   1        ES0 = 1;                      // Enable UART0 interrupt
  98   1      }
  99          
 100          void hal_uart_putchar(uint8_t ch)
 101          {
 102   1        // Wait until there is space in the TX buffer:
 103   1        while(uart_tx_cnt > UART_NBUF)
 104   1          ;
 105   1        ES0 = 0;
 106   1        if (uart_tx_cnt == 0)
 107   1        {
 108   2          S0BUF = ch;                 // Write first char directly to the UART SFR
 109   2        }
 110   1        else
 111   1        {
 112   2          uart_tx[uart_tx_wp] = ch;
 113   2          uart_tx_wp = (uart_tx_wp + 1) % UART_NBUF;
 114   2        }
 115   1        uart_tx_cnt++;
C51 COMPILER V9.53.0.0   HAL_UART                                                          08/13/2015 13:35:47 PAGE 3   

 116   1        ES0 = 1;
 117   1      }
 118          
 119          uint8_t hal_uart_chars_available(void)
 120          {
 121   1        return uart_rx_cnt;
 122   1      }
 123          
 124          uint8_t hal_uart_getchar(void)
 125          {
 126   1        uint8_t ch;
 127   1      
 128   1        // Wait until a character is available:
 129   1        while(uart_rx_cnt == 0)
 130   1          ;
 131   1        ES0 = 0;
 132   1        ch = uart_rx[uart_rx_rp];
 133   1        uart_rx_rp = (uart_rx_rp + 1) % UART_NBUF;
 134   1        uart_rx_cnt--;
 135   1        ES0 = 1;
 136   1        return ch;
 137   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    219    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =     16    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
